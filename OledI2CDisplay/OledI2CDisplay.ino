#include <OLED_I2C.h>

OLED myOLED(A4, A5, 8);  // Data, Clock, Reset (optional) 128x64 oled screen

extern uint8_t SmallFont[];  // TinyFont, SmallFont, MediumNumbers, BigNumbers

void setup() {
  myOLED.begin();  // resets and clears the display
  myOLED.setFont(SmallFont);

  // *** Other functions ***

  // myOLED.setBrightness(0); // 0-255 (default is 207) (it isn't working for me)
  // myOLED.update(); // Copy the screen buffer to the screen

  // myOLED.clrScr() // Clear the screen buffer
  // myOLED.fillScr(); // Fill the scrren buffer (blue)
  // myOLED.invert(bool); // true -> invert the display (blue background black text) - false -> normal display (black background blue text)
  // myOLED.setPixel(x, y); // x and y is coordinate from upper left - x is between 0-127 y is between 0-63
  // myOLED.clrPixel(x, y); // Turn off the upper left pixel (in the screen buffer)
  // myOLED.invPixel(x, y); // Invert the upper left pixel (in the screen buffer)
  // myOLED.print(string, x, y); // Print a string at the specified coordinates in the screen buffer. You can use LEFT, CENTER and RIGHT instead of using coordinates of x
  // myOLED.printNumI(num, x, y, length, filter) // num must be intager, length (optional) is minimum number of digits/characters (including sign) to display, filter (character) fills empty spaces with a specified character (e.g., '0' or ' ') to match the required length
  // myOLED.invertText(mode); // Select if text printed with print(), printNumI() should be inverted; if mode is true, invert the text (adds a background under the text)

  // myOLED.drawLine(x1, y1, x2, y2); // Draw a line between two points in the screen buffer
  // myOLED.clrLine(x1, y1, x2, y2); // Clear a line between two points in the screen buffer

  // myOLED.drawRect(x1, y1, x2, y2); // Draw a rectangle between two points in the screen buffer
  // myOLED.clrRect(x1, y1, x2, y2); // Clear a rectangle between two points in the screen buffer
  // myOLED.drawRoundRect(x1, y1, x2, y2); // Draw a rectangle with slightly rounded corners between two points in the screen buffer - minimum size is 5 pixels
  // myOLED.clrRoundRect(x1, y1, x2, y2); // Clear a rectangle with slightly rounded corners between two points in the screen buffer - minimum size is 5 pixels

  // myOLED.drawCircle(x, y, radius); // Draw a ircle with a specified radius in the screen buffer
  // myOLED.clrCircle(x, y, radius); // Clear a ircle with a specified radius in the screen buffer

  // myOLED.drawBitmap(x, y, data, width, height); // data is array containing the bitmap-data

  myOLED.print("Rocket",70,30);
}

const unsigned char PROGMEM Rocket[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xE0, 0xF0, 0xF8, 0xF8, 0x7C,
  0x7C, 0x3E, 0x3E, 0x3E, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0xFF, 0xFF, 0xFE, 0xFC, 0xF8,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0xE0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
  0xF0, 0xF0, 0xF0, 0xF0, 0xF8, 0xFC, 0x7E, 0x3F, 0x1F, 0x0F, 0x07, 0x03, 0x01, 0x01, 0xE0, 0xF0,
  0xF0, 0xF0, 0xF0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xF0, 0xFF, 0xFF, 0xFF, 0x7F, 0x07,
  0x80, 0xE0, 0xF8, 0xFC, 0xFF, 0xFF, 0x9F, 0x8F, 0x03, 0x01, 0x00, 0x00, 0xC0, 0xE0, 0xF8, 0xFF,
  0xFF, 0x7F, 0x1F, 0x0F, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03,
  0x03, 0x03, 0x03, 0x81, 0xC0, 0xE0, 0xF0, 0xFC, 0xFE, 0x7F, 0x3F, 0x0F, 0x07, 0x01, 0x00, 0x00,
  0x01, 0x03, 0x03, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x1F, 0x1F, 0x3F, 0x7F, 0xFF, 0xFF, 0xFB,
  0xF0, 0xE0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xC0, 0xE0, 0xF0, 0xF0, 0xF8, 0xFC,
  0xFC, 0xFE, 0xFF, 0xFF, 0x0F, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xE0, 0xC0, 0x00, 0x00, 0x01, 0x03,
  0x07, 0x0F, 0x1F, 0x7F, 0xFF, 0xFE, 0xFF, 0xFF, 0x0F, 0x0F, 0x07, 0x03, 0x03, 0x01, 0x81, 0xC1,
  0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x78, 0x7F, 0x7F, 0x7F, 0x3F, 0x3F, 0x3F, 0x1F, 0x1F, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x1F, 0x7F, 0xFF, 0xFF, 0x7C, 0x7C, 0x3E, 0x3F, 0x1F, 0x0F, 0x0F,
  0x07, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void loop() {
  myOLED.drawBitmap(20, 0, Rocket, 48, 48);
  myOLED.update();
  delay(500);
}